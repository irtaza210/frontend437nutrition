{"ast":null,"code":"var _jsxFileName = \"/Users/irtaza/Documents/GitHub/437nutrition/backend/nutrition/src/components/TodaysMeals.js\";\nimport React, { Component } from 'react';\nimport './TodaysMeals.css';\nimport firebase from \"../fire\";\nimport { db } from '../fire';\nimport { FontAwesomeIcon } from '@fortawesome/react-fontawesome';\nimport { faWindowClose } from '@fortawesome/free-solid-svg-icons';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nclass TodaysMeals extends Component {\n  constructor(props) {\n    super(props);\n    this.state = {\n      // mealsArray: JSON.parse(localStorage.getItem('meals_array')),    \n      mealsArray: null,\n      loggedinuser: null // loggedinuser: JSON.parse(localStorage.getItem('loggedinuser')),\n\n    }; // Bind functions to self\n\n    this.fetchUserMeals = this.fetchUserMeals.bind(this); // Detects when user's login status changes and stores user info in local storage\n\n    firebase.auth().onAuthStateChanged(user => {\n      user ? localStorage.setItem('loggedinuser', JSON.stringify(user)) : localStorage.removeItem('loggedinuser');\n    });\n  }\n\n  render() {\n    // Check if meals array is already set. If it is, display meal names, if not, fetch the \n    //  data from db and return a temporary string until fetching is done. \n    var dob = new Date();\n    var dobArr = dob.toDateString().split(' ');\n    var dobFormat = dobArr[2] + ' ' + dobArr[1] + ' ' + dobArr[3];\n\n    if (this.state.mealsArray !== null) {\n      let arr = this.state.mealsArray;\n      let mealElements = arr.map((meal, index) =>\n      /*#__PURE__*/\n      // Pass the meal id to removeFromPlate function so we can remove that id from user's meals\n      _jsxDEV(\"div\", {\n        id: \"usermeals\",\n        children: [/*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"user-meal\",\n          children: [meal.name, /*#__PURE__*/_jsxDEV(FontAwesomeIcon, {\n            icon: faWindowClose,\n            onClick: this.removeFromPlate.bind(this, meal.id),\n            className: \"close-icon\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 46,\n            columnNumber: 25\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 44,\n          columnNumber: 21\n        }, this), /*#__PURE__*/_jsxDEV(\"br\", {}, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 50,\n          columnNumber: 21\n        }, this)]\n      }, index, true, {\n        fileName: _jsxFileName,\n        lineNumber: 43,\n        columnNumber: 17\n      }, this));\n      console.log(mealElements);\n      return /*#__PURE__*/_jsxDEV(\"div\", {\n        children: [/*#__PURE__*/_jsxDEV(\"h1\", {\n          id: \"mealsheader\",\n          children: [\"Meals for \", dobFormat, \" \"]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 57,\n          columnNumber: 21\n        }, this), \" \", /*#__PURE__*/_jsxDEV(\"br\", {}, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 57,\n          columnNumber: 70\n        }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n          children: mealElements\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 58,\n          columnNumber: 21\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 56,\n        columnNumber: 17\n      }, this);\n    } else {\n      this.fetchUserMeals();\n      return /*#__PURE__*/_jsxDEV(\"div\", {\n        children: [/*#__PURE__*/_jsxDEV(\"h1\", {\n          id: \"mealsheader\",\n          children: [\"Meals for \", dobFormat, \" \"]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 64,\n          columnNumber: 22\n        }, this), \" \", /*#__PURE__*/_jsxDEV(\"br\", {}, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 64,\n          columnNumber: 71\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 64,\n        columnNumber: 17\n      }, this);\n    }\n  } // componentWillUnmount() {\n  //     localStorage.removeItem('loggedinuser');\n  // }\n  // Removes the meal id from user's meals list in 'todaysmeals' collection\n\n\n  removeFromPlate(meal_id) {\n    let user = JSON.parse(localStorage.getItem('loggedinuser')); // get user from local storage\n\n    console.log(user);\n\n    if (user !== null) {\n      // Remove the meal id from user's meals\n      db.collection('todaysmeals').doc(user.uid).update({\n        \"meals\": firebase.firestore.FieldValue.arrayRemove(meal_id)\n      }).then(() => {\n        console.log(`Just removed ${meal_id} from ${user.email}'s plate`);\n        this.setState({\n          mealsArray: null\n        });\n      });\n    }\n  } // This fetches user meals from db and updates the state\n\n\n  fetchUserMeals() {\n    console.log(\"______Fetching user meals ____________\"); // Get reference to todaysmeals collection\n\n    let collection = db.collection(\"todaysmeals\");\n    let mealsCollection = db.collection(\"meals\");\n    let user = JSON.parse(localStorage.getItem('loggedinuser')); // get user from local storage\n\n    console.log(user);\n\n    if (user !== null) {\n      let uid = user.uid;\n      console.log(uid); // get list of today's meals for this user  \n\n      collection.doc(uid).get().then(doc => {\n        let mealsArr = doc.data().meals; // get meals array field of the entry in 'todaysmeals'\n\n        console.log(`Data we got: ${mealsArr}`);\n        var stateArray = []; // temp array (will assign to state property afterward)\n        // Get meal info from meals collection\n\n        for (var i = 0; i < mealsArr.length; i++) {\n          let mealId = mealsArr[i]; // need to save it to be able to use it inside .then()\n\n          mealsCollection.doc(mealId).get().then(doc => {\n            let obj = doc.data();\n            var mealObj = {\n              id: mealId,\n              name: obj.name,\n              // string\n              // date: obj.date, // string (don't think we need it)   \n              nutrition: obj.nutrition // map [string -> number]\n\n            }; // push() returns the new length of the array \n\n            if (stateArray.push(mealObj) == mealsArr.length) {\n              this.setState({\n                mealsArray: stateArray\n              }, function () {\n                console.log(\" --- Just set 'mealsArray' ------\");\n              });\n            }\n          });\n        }\n      });\n    }\n  }\n\n}\n\nexport default TodaysMeals;","map":{"version":3,"sources":["/Users/irtaza/Documents/GitHub/437nutrition/backend/nutrition/src/components/TodaysMeals.js"],"names":["React","Component","firebase","db","FontAwesomeIcon","faWindowClose","TodaysMeals","constructor","props","state","mealsArray","loggedinuser","fetchUserMeals","bind","auth","onAuthStateChanged","user","localStorage","setItem","JSON","stringify","removeItem","render","dob","Date","dobArr","toDateString","split","dobFormat","arr","mealElements","map","meal","index","name","removeFromPlate","id","console","log","meal_id","parse","getItem","collection","doc","uid","update","firestore","FieldValue","arrayRemove","then","email","setState","mealsCollection","get","mealsArr","data","meals","stateArray","i","length","mealId","obj","mealObj","nutrition","push"],"mappings":"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","sourcesContent":["import React, { Component } from 'react';\nimport './TodaysMeals.css';\nimport firebase from \"../fire\";\nimport { db } from '../fire';\nimport { FontAwesomeIcon } from '@fortawesome/react-fontawesome';\nimport { faWindowClose } from '@fortawesome/free-solid-svg-icons';\n\n\nclass TodaysMeals extends Component {\n    constructor(props) {\n        super(props);\n\n        this.state = {\n            // mealsArray: JSON.parse(localStorage.getItem('meals_array')),    \n            mealsArray: null,\n            loggedinuser: null,\n            // loggedinuser: JSON.parse(localStorage.getItem('loggedinuser')),\n        }\n        // Bind functions to self\n        this.fetchUserMeals = this.fetchUserMeals.bind(this);\n        // Detects when user's login status changes and stores user info in local storage\n        firebase.auth().onAuthStateChanged(user => {\n            user\n                ? localStorage.setItem('loggedinuser', JSON.stringify(user))\n                : localStorage.removeItem('loggedinuser');\n        });\n\n\n    }\n\n\n    render() {\n\n        // Check if meals array is already set. If it is, display meal names, if not, fetch the \n        //  data from db and return a temporary string until fetching is done. \n        var dob = new Date();\n        var dobArr = dob.toDateString().split(' ');\n        var dobFormat = dobArr[2] + ' ' + dobArr[1] + ' ' + dobArr[3];\n        if (this.state.mealsArray !== null) {\n            let arr = this.state.mealsArray;\n            let mealElements = arr.map((meal, index) =>\n                // Pass the meal id to removeFromPlate function so we can remove that id from user's meals\n                <div key={index} id = \"usermeals\">\n                    <div className=\"user-meal\">\n                        {meal.name}\n                        <FontAwesomeIcon icon={faWindowClose}\n                            onClick={this.removeFromPlate.bind(this, meal.id)}\n                            className=\"close-icon\" />\n                    </div>\n                    <br></br>\n                </div>\n            );\n\n            console.log(mealElements);\n            return (\n                <div>\n                    <h1 id=\"mealsheader\">Meals for {dobFormat} </h1> <br></br>\n                    <div>{mealElements}</div>\n                </div>\n            );\n        } else {\n            this.fetchUserMeals();\n            return (\n                <div><h1 id=\"mealsheader\">Meals for {dobFormat} </h1> <br></br></div>\n            );\n        }\n\n    }\n\n    // componentWillUnmount() {\n    //     localStorage.removeItem('loggedinuser');\n    // }\n\n    // Removes the meal id from user's meals list in 'todaysmeals' collection\n    removeFromPlate(meal_id) {\n\n        let user = JSON.parse(localStorage.getItem('loggedinuser'));    // get user from local storage\n        console.log(user);\n        if (user !== null) {\n            // Remove the meal id from user's meals\n            db.collection('todaysmeals').doc(user.uid).update({\n                \"meals\": firebase.firestore.FieldValue.arrayRemove(meal_id)\n            }).then(() => {\n                console.log(`Just removed ${meal_id} from ${user.email}'s plate`);\n                this.setState({\n                    mealsArray: null,\n                });\n\n            });\n        }\n    }\n\n    // This fetches user meals from db and updates the state\n    fetchUserMeals() {\n        console.log(\"______Fetching user meals ____________\");\n\n        // Get reference to todaysmeals collection\n        let collection = db.collection(\"todaysmeals\");\n        let mealsCollection = db.collection(\"meals\");\n        \n        let user = JSON.parse(localStorage.getItem('loggedinuser'));    // get user from local storage\n        console.log(user);\n        if (user !== null) {\n            let uid = user.uid;\n            console.log(uid);\n            // get list of today's meals for this user  \n            collection.doc(uid).get().then((doc) => {\n\n                let mealsArr = doc.data().meals;  // get meals array field of the entry in 'todaysmeals'\n                console.log(`Data we got: ${mealsArr}`);\n                var stateArray = [];    // temp array (will assign to state property afterward)\n                // Get meal info from meals collection\n                for (var i = 0; i < mealsArr.length; i++) {\n                    let mealId = mealsArr[i];   // need to save it to be able to use it inside .then()\n                    mealsCollection.doc(mealId).get().then((doc) => {\n\n                        let obj = doc.data();\n\n                        var mealObj = {\n                            id: mealId,\n                            name: obj.name, // string\n                            // date: obj.date, // string (don't think we need it)   \n                            nutrition: obj.nutrition    // map [string -> number]\n                        }\n                        // push() returns the new length of the array \n                        if (stateArray.push(mealObj) == mealsArr.length) {\n\n                            this.setState({\n                                mealsArray: stateArray,\n                            }, function () {\n                                console.log(\" --- Just set 'mealsArray' ------\");\n                            });\n\n                        }\n\n                    });\n\n                }\n\n            });\n        }\n\n\n    }\n\n\n\n}\n\n\nexport default TodaysMeals;"]},"metadata":{},"sourceType":"module"}