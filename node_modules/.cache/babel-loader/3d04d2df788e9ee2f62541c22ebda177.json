{"ast":null,"code":"var _jsxFileName = \"/Users/irtaza/Documents/GitHub/437nutrition/backend/nutrition/src/components/Dropdown.js\";\nimport React, { Component } from \"react\";\nimport './Dropdown.css';\nimport { FontAwesomeIcon } from '@fortawesome/react-fontawesome';\nimport { faCheck } from '@fortawesome/free-solid-svg-icons';\nimport { faAngleUp } from '@fortawesome/free-solid-svg-icons';\nimport { faAngleDown } from '@fortawesome/free-solid-svg-icons';\nimport Button from '@material-ui/core/Button';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nclass Dropdown extends Component {\n  constructor(props) {\n    super(props);\n\n    this.close = () => {\n      this.setState({\n        isListOpen: false\n      });\n    };\n\n    this.toggleList = () => {\n      this.setState(prevState => ({\n        isListOpen: !prevState.isListOpen\n      }));\n    };\n\n    this.selectItem = item => {\n      const {\n        resetThenSet\n      } = this.props;\n      const {\n        title,\n        id,\n        key\n      } = item;\n      this.setState({\n        headerTitle: title,\n        isListOpen: true //changed to true to keep dropdown open after first click\n\n      }, () => resetThenSet(id, key));\n    };\n\n    this.state = {\n      isListOpen: false,\n      headerTitle: this.props.title\n    };\n    this.toggleList = this.toggleList.bind(this);\n  }\n\n  render() {\n    const {\n      isListOpen,\n      headerTitle\n    } = this.state;\n    const {\n      list\n    } = this.props;\n    return /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"dd-wrapper\",\n      children: [/*#__PURE__*/_jsxDEV(Button, {\n        variant: \"contained\",\n        id: \"dd-header\",\n        className: \"dd-header\",\n        onClick: this.toggleList,\n        children: [/*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"dd-header-title\",\n          children: headerTitle\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 28,\n          columnNumber: 17\n        }, this), isListOpen ? /*#__PURE__*/_jsxDEV(FontAwesomeIcon, {\n          icon: faAngleUp\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 31,\n          columnNumber: 21\n        }, this) : /*#__PURE__*/_jsxDEV(FontAwesomeIcon, {\n          icon: faAngleDown\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 32,\n          columnNumber: 21\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 27,\n        columnNumber: 15\n      }, this), \" \", /*#__PURE__*/_jsxDEV(\"br\", {}, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 33,\n        columnNumber: 25\n      }, this), /*#__PURE__*/_jsxDEV(\"br\", {}, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 33,\n        columnNumber: 34\n      }, this), /*#__PURE__*/_jsxDEV(\"br\", {}, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 33,\n        columnNumber: 43\n      }, this), isListOpen && /*#__PURE__*/_jsxDEV(\"div\", {\n        role: \"list\",\n        className: \"dd-list\",\n        children: list.map(item => /*#__PURE__*/_jsxDEV(Button, {\n          variant: \"outlined\",\n          id: \"dd-list-item\",\n          className: \"dd-list-item\",\n          onClick: e => {\n            e.stopPropagation();\n            this.selectItem(item);\n          },\n          children: [/*#__PURE__*/_jsxDEV(\"strong\", {\n            children: item.title\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 40,\n            columnNumber: 26\n          }, this), ' ', item.selected]\n        }, item.id, true, {\n          fileName: _jsxFileName,\n          lineNumber: 37,\n          columnNumber: 21\n        }, this))\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 35,\n        columnNumber: 17\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 26,\n      columnNumber: 13\n    }, this);\n  }\n\n  componentDidUpdate() {\n    const {\n      isListOpen\n    } = this.state;\n    setTimeout(() => {\n      if (isListOpen) {\n        window.addEventListener('click', this.close);\n      } else {\n        window.removeEventListener('click', this.close);\n      }\n    }, 0);\n  }\n\n  static getDerivedStateFromProps(nextProps) {\n    const {\n      list,\n      title\n    } = nextProps;\n    const selectedItem = list.filter(item => item.selected);\n\n    if (selectedItem.length) {\n      return {\n        headerTitle: selectedItem[0].title\n      };\n    }\n\n    return {\n      headerTitle: title\n    };\n  }\n\n}\n\nexport default Dropdown;","map":{"version":3,"sources":["/Users/irtaza/Documents/GitHub/437nutrition/backend/nutrition/src/components/Dropdown.js"],"names":["React","Component","FontAwesomeIcon","faCheck","faAngleUp","faAngleDown","Button","Dropdown","constructor","props","close","setState","isListOpen","toggleList","prevState","selectItem","item","resetThenSet","title","id","key","headerTitle","state","bind","render","list","map","e","stopPropagation","selected","componentDidUpdate","setTimeout","window","addEventListener","removeEventListener","getDerivedStateFromProps","nextProps","selectedItem","filter","length"],"mappings":"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","sourcesContent":["import React, {Component} from \"react\";\nimport './Dropdown.css';\nimport {FontAwesomeIcon} from '@fortawesome/react-fontawesome';\nimport { faCheck } from '@fortawesome/free-solid-svg-icons';\nimport { faAngleUp } from '@fortawesome/free-solid-svg-icons';\nimport { faAngleDown } from '@fortawesome/free-solid-svg-icons';\nimport Button from '@material-ui/core/Button';\n\nclass Dropdown extends Component {\n    constructor(props) {\n        super(props);\n\n        this.state = {\n            isListOpen: false,\n            headerTitle: this.props.title\n          }\n        this.toggleList = this.toggleList.bind(this);\n\n    }\n\n    render() {\n        const { isListOpen, headerTitle } = this.state;\n        const { list } = this.props;\n        \n        return (\n            <div className=\"dd-wrapper\">\n              <Button variant=\"contained\" id = \"dd-header\" className=\"dd-header\" onClick={this.toggleList} >\n                <div className=\"dd-header-title\">{headerTitle}</div>\n                \n                  {isListOpen\n                  ? <FontAwesomeIcon icon={faAngleUp} />\n                  : <FontAwesomeIcon icon={faAngleDown} />}\n              </Button> <br></br><br></br><br></br>\n              {isListOpen && (\n                <div role=\"list\" className=\"dd-list\">\n                  {list.map((item) => (\n                    <Button variant=\"outlined\" id = \"dd-list-item\" className=\"dd-list-item\" key={item.id} onClick={(e) => {\n                        e.stopPropagation();\n                        this.selectItem(item);\n                      }}><strong>\n                      {item.title}\n                      </strong>\n                      {' '}\n                      {/* {item.selected && <FontAwesomeIcon icon={faCheck} />} */}\n                      {item.selected}\n                    </Button>\n                  ))}\n                </div>\n              )}\n            </div>\n          );\n\n\n    }\n\n    componentDidUpdate(){\n        const { isListOpen } = this.state;\n      \n        setTimeout(() => {\n          if(isListOpen){\n            window.addEventListener('click', this.close)\n          }\n          else{\n            window.removeEventListener('click', this.close)\n          }\n        }, 0)\n    }\n\n    close = () => {\n        this.setState({\n          isListOpen: false,\n        });\n      }\n\n    toggleList = () => {\n        this.setState(prevState => ({\n          isListOpen: !prevState.isListOpen\n       }));\n    }\n    // Updates the state and calls resetThenSet() to update the 'location' state in parent and\n    //  mark the clicked item as selected.\n    selectItem = (item) => {\n        const { resetThenSet } = this.props;\n        const { title, id, key } = item;\n      \n        this.setState({\n          headerTitle: title,\n          isListOpen: true,//changed to true to keep dropdown open after first click\n        }, () => resetThenSet(id, key));\n    }\n\n    static getDerivedStateFromProps(nextProps) {\n        const { list, title } = nextProps;\n        const selectedItem = list.filter((item) => item.selected);\n      \n        if (selectedItem.length) {\n          return {\n            headerTitle: selectedItem[0].title,\n          };\n        }\n        return { headerTitle: title };\n      }\n\n\n}\n\nexport default Dropdown;"]},"metadata":{},"sourceType":"module"}