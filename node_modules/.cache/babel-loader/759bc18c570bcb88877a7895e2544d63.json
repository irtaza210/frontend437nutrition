{"ast":null,"code":"var _jsxFileName = \"/Users/irtaza/Documents/GitHub/437nutrition/backend/nutrition/src/App.js\";\n// import React, {useState, useEffect, useContext, Component} from 'react';\nimport { Component } from 'react';\nimport firebase from \"./fire\";\nimport { db } from './fire';\nimport { auth } from './fire'; // import { getAuth, updatePassword } from \"firebase/auth\";\n// import Button from '@material-ui/core/Button';\n// import TextField from '@material-ui/core/TextField';\n// import Chart from \"react-google-charts\";\n\nimport \"./style.css\";\nimport './App.css';\nimport { HashRouter, Route, Switch } from 'react-router-dom';\nimport LoginPage from './components/LoginPage';\nimport Navbar from './components/Navbar';\nimport Home from './components/Home';\nimport TodaysMeals from './components/TodaysMeals';\nimport MenuPage from './components/MenuPage';\nimport Settings from './components/Settings';\nimport { faBreadSlice } from '@fortawesome/free-solid-svg-icons'; // import Footer from './components/Footer';\n\n/* Notes: \n  Doc IDs in 'users' are user's uids\n*/\n\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nclass App extends Component {\n  constructor(props) {\n    super(props); // state properties:\n\n    this.state = {\n      // Get current user from localStorage and parse it as an object\n      loggedinuser: JSON.parse(localStorage.getItem(\"loggedinuser\")),\n      // loggedinuser: null,\n      todaysMeals: null\n    }; // Bind the functions so we can use them\n\n    this.login = this.login.bind(this);\n    this.register = this.register.bind(this);\n    this.updateEmailAndPassword = this.updateEmailAndPassword.bind(this);\n    this.logOut = this.logOut.bind(this);\n    this.fetchUserMeals = this.fetchUserMeals.bind(this); // firebase.auth().onAuthStateChanged(user => {\n    //   user\n    //     ? localStorage.setItem('loggedinuser', JSON.stringify(user))\n    //     : localStorage.removeItem('loggedinuser');\n    // });\n  }\n\n  render() {\n    // alert(\"hello\");\n    let currentUser = this.state.loggedinuser;\n\n    if (currentUser !== null) {\n      console.log(`---Navbar--- loggedinuser.email: ${currentUser.email}`); // Display home page\n\n      return (\n        /*#__PURE__*/\n        // HashRouter idea taken from: https: stackoverflow.com/questions/58228017/react-router-v4-cant-load-page-on-github-pages\n        _jsxDEV(HashRouter, {\n          basename: process.env.PUBLIC_URL,\n          children: /*#__PURE__*/_jsxDEV(\"div\", {\n            children: [/*#__PURE__*/_jsxDEV(Navbar, {\n              logOut: this.logOut,\n              userEmail: currentUser.email\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 68,\n              columnNumber: 13\n            }, this), /*#__PURE__*/_jsxDEV(Switch, {\n              children: [/*#__PURE__*/_jsxDEV(Route, {\n                exact: true,\n                path: \"/\",\n                component: Home\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 71,\n                columnNumber: 15\n              }, this), /*#__PURE__*/_jsxDEV(Route, {\n                path: \"/todays-meals\",\n                component: TodaysMeals\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 74,\n                columnNumber: 15\n              }, this), /*#__PURE__*/_jsxDEV(Route, {\n                path: \"/menu\",\n                component: MenuPage\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 75,\n                columnNumber: 15\n              }, this), /*#__PURE__*/_jsxDEV(Route, {\n                path: \"/settings\",\n                component: Settings\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 76,\n                columnNumber: 15\n              }, this)]\n            }, void 0, true, {\n              fileName: _jsxFileName,\n              lineNumber: 70,\n              columnNumber: 13\n            }, this)]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 67,\n            columnNumber: 11\n          }, this)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 66,\n          columnNumber: 9\n        }, this)\n      );\n    } else {\n      // Display login page\n      return /*#__PURE__*/_jsxDEV(LoginPage, {\n        updateEmailAndPassword: this.updateEmailAndPassword\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 89,\n        columnNumber: 9\n      }, this);\n    }\n  } // Fetches user meals from db and updates the state\n\n\n  fetchUserMeals() {\n    // Get reference to todaysmeals collection\n    let collection = db.collection(\"todaysmeals\");\n    let mealsCollection = db.collection(\"meals\");\n\n    if (firebase.auth().currentUser !== null) {\n      let uid = firebase.auth().currentUser.uid;\n      console.log(uid); // get list of today's meals for this user  // \n      // const cancellablePromise = db.collection(\"todaysmeals\").get();\n\n      db.collection(\"todaysmeals\").doc(uid).get().then(doc => {\n        console.log(this);\n        let mealsArr = doc.data().meals; // user doc with email and list of meals\n\n        console.log(`Data we got: ${mealsArr}`); // data = {email: \"\", meals: []}\n\n        var stateArray = []; // Get meal info from meals collection\n\n        for (var i = 0; i < mealsArr.length; i++) {\n          db.collection(\"meals\").doc(mealsArr[i]).get().then(doc => {\n            // I got errors when I pushed obj to array (probably b/c it's a complex object)\n            //  so I'm extracting necessary info and constructing our own object.\n            let obj = doc.data();\n            var mealObj = {\n              name: obj.name,\n              // string\n              date: obj.date,\n              // string   \n              nutrition: obj.nutrition // map [string -> number]\n\n            };\n            console.log(mealObj);\n\n            if (stateArray.push(mealObj) === mealsArr.length) {\n              this.setState({\n                todaysMeals: stateArray\n              });\n              console.log(this.state.todaysMeals);\n            }\n          });\n        }\n      });\n    }\n  }\n\n  componentDidUpdate() {} // updateEmailAndPassword: passed to child component and called from there when user the login or register form\n  //  obj has email and password; isLogin is true if the user clicked \"Login\", false if user clicked \"Register\"\n\n\n  updateEmailAndPassword(userObj, info, isLogin) {\n    console.log(\"isLogin= \" + isLogin);\n    console.log(`Received: ${info}`);\n    isLogin ? this.login(userObj) : this.register(userObj, info);\n  } // register: Creates a user with default parameters and logs them in\n\n\n  register(userObj, info) {\n    firebase.auth().createUserWithEmailAndPassword(userObj.email, userObj.password).then(userCredential => {\n      //once we have made the user we need to add it to the \"users\" collection of firebase which stores all\n      // the height weight and allergies. there needs to be some value given to these fields initally\n      // so i am putting 0 for height and weight and false for all allergies and other for gender.\n      let uid = userCredential.user.uid; // let uid = userObj.uid;\n      // Using uid as doc ID for user entry\n\n      db.collection('users').doc(uid).set({\n        name: userObj.name,\n        // recently added while working on the settings page\n        email: userObj.email,\n        heightfeet: info.heightfeet,\n        heightinches: info.heightinches,\n        weight: info.weight,\n        age: info.age,\n        gender: info.gender,\n        dairy: info.dairy,\n        nuts: info.nuts,\n        egg: info.egg,\n        wheat: info.wheat,\n        soybean: info.soybean,\n        // vegetarian: info.vegetarian,\n        // vegan: info.vegan,\n        gluten: info.gluten\n      }); // Create a doc for the user in 'todaysmeals' collection so we can only call \"update\" when user adds\n      //  a meal to plate.\n\n      db.collection('todaysmeals').doc(uid).set({\n        email: userObj.email,\n        meals: []\n      });\n      console.log(`-- Registered ${userObj.email}`);\n      this.login(userObj);\n    }).catch(err => {\n      console.error(err);\n      console.log(err);\n      alert(err);\n    });\n  }\n\n  login(userObj) {\n    //used to log the user in\n    console.log(\"------ Inside login() -------\");\n    firebase.auth().signInWithEmailAndPassword(userObj.email, userObj.password).then(userCredential => {\n      // localStorage.clear();\n      // Set current user and reset email and password \n      this.setState({\n        loggedinuser: userCredential.user // storing the whole user object\n\n      }, function () {\n        console.log(`User logged in: ${this.state.loggedinuser.email}`); // Save user to local storage\n\n        localStorage.setItem('loggedinuser', JSON.stringify(this.state.loggedinuser)); // Force update the the page (will cause the Home component to update as well, which is what we want)\n        //  Now the bar chart is displaying immediately after user logs in, instead of on page refresh.\n\n        this.forceUpdate();\n      });\n    }).catch(err => {\n      console.log(\"------ ERROR LOGGING IN -------\");\n      console.log(err);\n      alert(err);\n      var yesOrno;\n\n      if (err.message == \"The password is invalid or the user does not have a password.\") {\n        while (yesOrno != \"yes\" || yesOrno != \"no\") {\n          yesOrno = prompt(\"Do you want to reset your password? Answer either 'yes' or 'no'\");\n\n          if (yesOrno == \"yes\") {\n            firebase.auth().sendPasswordResetEmail(userObj.email).then(() => {\n              alert(\"password reset email sent\");\n            }).catch(error => {\n              var errorCode = error.code;\n              var errorMessage = error.message;\n              alert(errorMessage); // ..\n            });\n            break;\n          }\n\n          if (yesOrno == \"no\" || yesOrno == null) {\n            break;\n          }\n        }\n      }\n    });\n  }\n\n  logOut() {\n    // firebase.auth().signOut().then(() => {\n    //   // localStorage.removeItem(\"loggedinuser\") // remove user from localStorage\n    //   localStorage.clear();   // clear local cache completely\n    //   let loggingOutUserEmail = this.state.loggedinuser.email;\n    //   this.setState({ \n    //     loggedinuser: null,\n    //    }, function () {\n    //     console.log(`${loggingOutUserEmail} logged out`);\n    //   });\n    // });\n    // BELOW CODE FIXED THE WARNING ABOUT NOT BEING ABLE TO SET STATE ON UNMOUNTED COMPONENT:\n    this.setState({\n      loggedinuser: null\n    }, function () {\n      firebase.auth().signOut().then(() => {\n        localStorage.clear(); // clear local cache completely\n\n        console.log(\"Successfully logged out\");\n      });\n    });\n  }\n\n}\n\nexport default App;","map":{"version":3,"sources":["/Users/irtaza/Documents/GitHub/437nutrition/backend/nutrition/src/App.js"],"names":["Component","firebase","db","auth","HashRouter","Route","Switch","LoginPage","Navbar","Home","TodaysMeals","MenuPage","Settings","faBreadSlice","App","constructor","props","state","loggedinuser","JSON","parse","localStorage","getItem","todaysMeals","login","bind","register","updateEmailAndPassword","logOut","fetchUserMeals","render","currentUser","console","log","email","process","env","PUBLIC_URL","collection","mealsCollection","uid","doc","get","then","mealsArr","data","meals","stateArray","i","length","obj","mealObj","name","date","nutrition","push","setState","componentDidUpdate","userObj","info","isLogin","createUserWithEmailAndPassword","password","userCredential","user","set","heightfeet","heightinches","weight","age","gender","dairy","nuts","egg","wheat","soybean","gluten","catch","err","error","alert","signInWithEmailAndPassword","setItem","stringify","forceUpdate","yesOrno","message","prompt","sendPasswordResetEmail","errorCode","code","errorMessage","signOut","clear"],"mappings":"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","sourcesContent":["// import React, {useState, useEffect, useContext, Component} from 'react';\nimport { Component } from 'react';\nimport firebase from \"./fire\";\nimport {db} from './fire';\nimport {auth} from './fire';\n// import { getAuth, updatePassword } from \"firebase/auth\";\n// import Button from '@material-ui/core/Button';\n// import TextField from '@material-ui/core/TextField';\n\n// import Chart from \"react-google-charts\";\nimport \"./style.css\"\n\nimport './App.css';\nimport { HashRouter, Route, Switch } from 'react-router-dom';\nimport LoginPage from './components/LoginPage';\n\nimport Navbar from './components/Navbar';\nimport Home from './components/Home';\nimport TodaysMeals from './components/TodaysMeals';\nimport MenuPage from './components/MenuPage';\nimport Settings from './components/Settings';\nimport { faBreadSlice } from '@fortawesome/free-solid-svg-icons';\n// import Footer from './components/Footer';\n\n/* Notes: \n  Doc IDs in 'users' are user's uids\n*/\nclass App extends Component {\n  constructor(props) {\n    super(props);\n    // state properties:\n    this.state = {\n      // Get current user from localStorage and parse it as an object\n      loggedinuser: JSON.parse(localStorage.getItem(\"loggedinuser\")),\n      // loggedinuser: null,\n      todaysMeals: null,\n      \n    }\n\n    // Bind the functions so we can use them\n    \n    this.login = this.login.bind(this);\n    this.register = this.register.bind(this);\n    this.updateEmailAndPassword = this.updateEmailAndPassword.bind(this);\n    this.logOut = this.logOut.bind(this);\n    this.fetchUserMeals = this.fetchUserMeals.bind(this);\n\n    // firebase.auth().onAuthStateChanged(user => {\n    //   user\n    //     ? localStorage.setItem('loggedinuser', JSON.stringify(user))\n    //     : localStorage.removeItem('loggedinuser');\n    // });\n    \n  }\n\n  render() {\n    // alert(\"hello\");\n    let currentUser = this.state.loggedinuser;\n\n    if (currentUser !== null) {\n      console.log(`---Navbar--- loggedinuser.email: ${currentUser.email}`);\n      \n      // Display home page\n      return (\n        // HashRouter idea taken from: https: stackoverflow.com/questions/58228017/react-router-v4-cant-load-page-on-github-pages\n        <HashRouter basename={process.env.PUBLIC_URL}>\n          <div>\n            <Navbar logOut={this.logOut} userEmail={currentUser.email} />\n\n            <Switch>\n              <Route exact path=\"/\" component={Home} />\n              {/* ------------ HOW TO PASS DATA TO COMPONENT INSIDE A ROUTER? -------- */}\n              {/* <Route path=\"/todays-meals\" render={(props) => <TodaysMeals todaysMeals={this.state.todaysMeals} fetchUserMeals={this.fetchUserMeals} />}/> */}\n              <Route path=\"/todays-meals\" component={TodaysMeals} />\n              <Route path=\"/menu\" component={MenuPage} />\n              <Route path=\"/settings\" component={Settings} />\n              {/* <Route path=\"/login\" render={ ()=> <LoginPage updateEmailAndPassword={this.updateEmailAndPassword} /> } /> */}\n              \n            </Switch>\n            {/* <Footer /> */}\n            \n          </div>\n        </HashRouter>\n      );\n\n    } else {\n      // Display login page\n      return (\n        <LoginPage updateEmailAndPassword={this.updateEmailAndPassword} />\n      );\n      \n    }\n    \n\n\n  }\n\n  // Fetches user meals from db and updates the state\n  fetchUserMeals() {\n    // Get reference to todaysmeals collection\n    let collection = db.collection(\"todaysmeals\");\n    let mealsCollection = db.collection(\"meals\");\n\n    if (firebase.auth().currentUser !== null) {\n        let uid = firebase.auth().currentUser.uid;\n        console.log(uid);\n\n        // get list of today's meals for this user  // \n        // const cancellablePromise = db.collection(\"todaysmeals\").get();\n        db.collection(\"todaysmeals\").doc(uid).get().then((doc) => {\n            console.log(this);\n\n            let mealsArr = doc.data().meals;  // user doc with email and list of meals\n            console.log(`Data we got: ${mealsArr}`);     // data = {email: \"\", meals: []}\n            var stateArray = [];\n            // Get meal info from meals collection\n            for (var i = 0; i < mealsArr.length; i++) {\n              db.collection(\"meals\").doc(mealsArr[i]).get().then((doc) => {\n                    // I got errors when I pushed obj to array (probably b/c it's a complex object)\n                    //  so I'm extracting necessary info and constructing our own object.\n                    let obj = doc.data();\n\n                    var mealObj = {\n                        name: obj.name, // string\n                        date: obj.date, // string   \n                        nutrition: obj.nutrition    // map [string -> number]\n                    }\n                    console.log(mealObj);\n                    \n                    if (stateArray.push(mealObj) === mealsArr.length) {\n                        this.setState({\n                          todaysMeals: stateArray,\n                        });\n                        console.log(this.state.todaysMeals);\n                        \n                    }\n\n                });\n\n            }\n\n        });\n    }\n\n\n}\n\n  componentDidUpdate() {\n\n  }\n\n\n  // updateEmailAndPassword: passed to child component and called from there when user the login or register form\n  //  obj has email and password; isLogin is true if the user clicked \"Login\", false if user clicked \"Register\"\n  updateEmailAndPassword(userObj, info, isLogin) {\n    console.log(\"isLogin= \" + isLogin);\n    console.log(`Received: ${info}`);\n    isLogin ? this.login(userObj) : this.register(userObj, info);\n    \n  }\n\n  // register: Creates a user with default parameters and logs them in\n  register(userObj, info) {\n    firebase\n      .auth()\n      .createUserWithEmailAndPassword(userObj.email, userObj.password)\n      .then((userCredential) => {\n        //once we have made the user we need to add it to the \"users\" collection of firebase which stores all\n        // the height weight and allergies. there needs to be some value given to these fields initally\n        // so i am putting 0 for height and weight and false for all allergies and other for gender.\n        let uid = userCredential.user.uid;\n        \n        // let uid = userObj.uid;\n        // Using uid as doc ID for user entry\n        db.collection('users').doc(uid).set({\n          name: userObj.name, // recently added while working on the settings page\n          email: userObj.email,\n          heightfeet: info.heightfeet,\n          heightinches: info.heightinches,\n          weight: info.weight,\n          age: info.age,\n          gender: info.gender,\n          dairy: info.dairy,\n          nuts: info.nuts,\n          egg: info.egg,\n          wheat: info.wheat,\n          soybean: info.soybean,\n          // vegetarian: info.vegetarian,\n          // vegan: info.vegan,\n          gluten: info.gluten,\n        });\n        // Create a doc for the user in 'todaysmeals' collection so we can only call \"update\" when user adds\n        //  a meal to plate.\n\n        db.collection('todaysmeals').doc(uid).set({\n          email: userObj.email,\n          meals: []\n        });\n        console.log(`-- Registered ${userObj.email}`);\n\n        this.login(userObj);\n\n\n      })\n      .catch((err) => {\n        console.error(err);\n        console.log(err);\n        alert(err);\n      });\n  };\n\n  login(userObj) {\n    //used to log the user in\n    console.log(\"------ Inside login() -------\")\n    firebase\n      .auth()\n      .signInWithEmailAndPassword(userObj.email, userObj.password)\n      .then((userCredential) => {\n        // localStorage.clear();\n        // Set current user and reset email and password \n        this.setState({\n          loggedinuser: userCredential.user,  // storing the whole user object\n\n        }, function () {\n\n          console.log(`User logged in: ${this.state.loggedinuser.email}`);\n\n          // Save user to local storage\n          localStorage.setItem('loggedinuser', JSON.stringify(this.state.loggedinuser));\n          // Force update the the page (will cause the Home component to update as well, which is what we want)\n          //  Now the bar chart is displaying immediately after user logs in, instead of on page refresh.\n          this.forceUpdate();\n\n\n        });\n\n      }).catch((err) => {\n        console.log(\"------ ERROR LOGGING IN -------\")\n        console.log(err);\n        alert(err);\n        var yesOrno;\n        if (err.message == \"The password is invalid or the user does not have a password.\") {\n          while (yesOrno != \"yes\" || yesOrno != \"no\") {\n            yesOrno = prompt(\"Do you want to reset your password? Answer either 'yes' or 'no'\");\n            if (yesOrno == \"yes\") {\n              firebase.auth().sendPasswordResetEmail(userObj.email)\n              .then(() => {\n                alert(\"password reset email sent\")\n              })\n              .catch((error) => {\n                var errorCode = error.code;\n                var errorMessage = error.message;\n                alert(errorMessage);\n                // ..\n              });\n              break;\n            }\n            if (yesOrno == \"no\" || yesOrno == null) {\n              break;\n            }\n          }\n        }\n      });\n  };\n  \n  logOut() {\n\n    // firebase.auth().signOut().then(() => {\n    //   // localStorage.removeItem(\"loggedinuser\") // remove user from localStorage\n    //   localStorage.clear();   // clear local cache completely\n    //   let loggingOutUserEmail = this.state.loggedinuser.email;\n    //   this.setState({ \n    //     loggedinuser: null,\n    //    }, function () {\n    //     console.log(`${loggingOutUserEmail} logged out`);\n        \n    //   });\n    // });\n    // BELOW CODE FIXED THE WARNING ABOUT NOT BEING ABLE TO SET STATE ON UNMOUNTED COMPONENT:\n    this.setState({ \n      loggedinuser: null,\n     }, function () {\n\n      firebase.auth().signOut().then(() => {\n        localStorage.clear();   // clear local cache completely\n        console.log(\"Successfully logged out\"); \n\n      });\n      \n    });\n    \n  };\n\n  \n\n\n}\nexport default App;"]},"metadata":{},"sourceType":"module"}