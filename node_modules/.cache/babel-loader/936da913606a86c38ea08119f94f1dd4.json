{"ast":null,"code":"var _jsxFileName = \"/Users/irtaza/Documents/GitHub/437nutrition/backend/nutrition/src/components/Home.js\";\nimport React, { Component, PureComponent } from 'react';\nimport './Home.css';\nimport firebase from \"../fire\";\nimport { db } from '../fire';\nimport Chart from \"react-google-charts\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nclass Home extends Component {\n  constructor(props) {\n    super(props);\n    this.state = {\n      loggedinuser: null,\n      mealsArray: null,\n      // user's meals\n      userTotals: null,\n      // map of nutrients to their total amounts\n      heightfeet: null,\n      heightinches: null,\n      weight: null,\n      age: null,\n      gender: null\n    };\n    this.fetchUserMeals = this.fetchUserMeals.bind(this);\n    firebase.auth().onAuthStateChanged(user => {\n      user ? localStorage.setItem('loggedinuser', JSON.stringify(user)) : localStorage.removeItem('loggedinuser');\n    });\n  } //formula = 10*heightfeet + 5*heightinches + weight\n\n\n  render() {\n    let heightfeet = this.state.heightfeet;\n    let heightinches = this.state.heightinches;\n    let gender = this.state.gender;\n    let age = this.state.age;\n    let weight = this.state.weight;\n\n    if (this.state.userTotals !== null && heightfeet !== null && heightinches !== null && weight !== null && age != null && gender != null) {\n      let totals = this.state.userTotals;\n      var bmr;\n\n      if (gender == \"female\") {\n        bmr = 6.25 * (parseInt(heightfeet) * 30.48 + 2.54 * parseInt(heightinches)) + 10 * parseInt(weight) / 2.205 - 5 * parseInt(age) - 161;\n      } else {\n        bmr = 6.25 * (parseInt(heightfeet) * 30.48 + 2.54 * parseInt(heightinches)) + 10 * parseInt(weight) / 2.205 - 5 * parseInt(age) - 5;\n      }\n\n      let recommendedcalories = parseInt(bmr * 1.4); //let recommended = this.state.userRecommended;\n\n      console.log(totals);\n      return /*#__PURE__*/_jsxDEV(\"div\", {\n        id: \"w\",\n        children: [/*#__PURE__*/_jsxDEV(\"br\", {}, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 55,\n          columnNumber: 21\n        }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n          children: [/*#__PURE__*/_jsxDEV(\"div\", {\n            id: \"total\",\n            children: [/*#__PURE__*/_jsxDEV(\"h1\", {\n              children: [\"Total Calories: \", totals.calories, \" Kcal\"]\n            }, void 0, true, {\n              fileName: _jsxFileName,\n              lineNumber: 57,\n              columnNumber: 37\n            }, this), \" \"]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 57,\n            columnNumber: 21\n          }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n            id: \"recommended\",\n            children: /*#__PURE__*/_jsxDEV(\"h2\", {\n              children: [\"Recommended: \", recommendedcalories, \" Kcal\"]\n            }, void 0, true, {\n              fileName: _jsxFileName,\n              lineNumber: 58,\n              columnNumber: 43\n            }, this)\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 58,\n            columnNumber: 21\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 56,\n          columnNumber: 21\n        }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n          id: \"chart\",\n          style: {\n            display: 'flex',\n            maxWidth: 660\n          },\n          children: /*#__PURE__*/_jsxDEV(Chart, {\n            id: \"rchart\",\n            width: 350,\n            height: 450 // width={'650px'}\n            // height={'600px'}\n            ,\n            chartType: \"BarChart\",\n            loader: /*#__PURE__*/_jsxDEV(\"div\", {\n              children: \"Loading Chart\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 68,\n              columnNumber: 37\n            }, this),\n            data: [// Data from https://www.fda.gov/media/99069/download \n            // Fat:\t        78 g\n            // Sat. fat:\t20 g\n            // Cholesterol:\t300 mg = 0.3 g\n            // Carbs:\t    275 g\n            // Sodium:\t    2300 mg = 2.3 g\n            // Fiber:\t    28 g\n            // Protein:     50 g\n            // Sugars:      50 g\n            ['Nutrients', 'Your intake', {\n              role: 'style'\n            }, {\n              role: 'annotation'\n            }, 'Recommended intake', {\n              role: 'style'\n            }, {\n              role: 'annotation'\n            }], // ['Calories', totals.calories, 'stroke-color: #703593; stroke-width: 4; fill-color: #C5A5CF', `You`, 2000, 'stroke-width: 2; fill-color: lightblue; stroke-color: blue; opacity: 0.5', `Recommended`],\n            ['Fat', totals.fat_g, 'stroke-color: #F2C57C; stroke-width: 4; fill-color: #F2C57C', `You`, 0.27 * recommendedcalories * 0.1296, 'stroke-width: 2; fill-color: lightblue; stroke-color: lightblue; opacity: 0.5', `Recommended`], ['Sat. fat', totals.sat_fat_g, 'stroke-color: #DDAE7E; stroke-width: 4; fill-color: #DDAE7E', `You`, 0.10 * recommendedcalories * 0.1296, 'stroke-width: 2; fill-color: lightblue; stroke-color: lightblue; opacity: 0.5', `Recommended`], // ['Cholesterol', totals.chol_g, 'stroke-color: #7FB685; stroke-width: 4; fill-color: #7FB685', `You`, 0.3, 'stroke-width: 2; fill-color: lightblue; stroke-color: lightblue; opacity: 0.5', `Recommended`],\n            ['Carbs', totals.carbs_g, 'stroke-color: #426A5A; stroke-width: 4; fill-color: #426A5A', `You`, 0.55 * recommendedcalories * 0.1296, 'stroke-width: 2; fill-color: lightblue; stroke-color: lightblue; opacity: 0.5', `Recommended`], ['Sodium', totals.sodium_g, 'stroke-color: #EF6F6C; stroke-width: 4; fill-color: #EF6F6C', `You`, 2.3, 'stroke-width: 2; fill-color: lightblue; stroke-color: lightblue; opacity: 0.5', `Recommended`], ['Fiber', totals.fiber_g, 'stroke-color: #CFA5B4; stroke-width: 4; fill-color: #CFA5B4', `You`, 28, 'stroke-width: 2; fill-color: lightblue; stroke-color: lightblue; opacity: 0.5', `Recommended`], ['Protein', totals.protein_g, 'stroke-color: #7A306C; stroke-width: 4; fill-color: #7A306C', `You`, 0.225 * recommendedcalories * 0.1296, 'stroke-width: 2; fill-color: lightblue; stroke-color: lightblue; opacity: 0.5', `Recommended`], ['Sugars', totals.sugar_g, 'stroke-color: #D62246; stroke-width: 4; fill-color: #D62246', `You`, 0.05 * recommendedcalories * 0.1296, 'stroke-width: 2; fill-color: lightblue; stroke-color: lightblue; opacity: 0.5', `Recommended`]],\n            options: {\n              title: \"Today's Nutrient Intake\",\n              chartArea: {\n                width: '70%'\n              },\n              hAxis: {\n                title: 'Amount in grams',\n                minValue: 0\n              },\n              bar: {\n                groupWidth: \"65%\"\n              },\n              // vAxis: {\n              //     title: '',\n              // },\n              // * hide legend b/c bars are not custimizable\n              legend: {\n                position: 'none'\n              },\n              // background color of graph\n              backgroundColor: '#ffffff'\n            } // For tests\n            ,\n            rootProps: {\n              'data-testid': '1'\n            }\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 61,\n            columnNumber: 25\n          }, this)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 60,\n          columnNumber: 21\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 54,\n        columnNumber: 17\n      }, this);\n    } else if (this.state.userTotals == null && heightfeet !== null && heightinches !== null && weight !== null && age != null && gender != null) {\n      let totals = this.state.userTotals;\n      var bmr;\n\n      if (gender == \"female\") {\n        bmr = 6.25 * (parseInt(heightfeet) * 30.48 + 2.54 * parseInt(heightinches)) + 10 * parseInt(weight) / 2.205 - 5 * parseInt(age) - 161;\n      } else {\n        bmr = 6.25 * (parseInt(heightfeet) * 30.48 + 2.54 * parseInt(heightinches)) + 10 * parseInt(weight) / 2.205 - 5 * parseInt(age) - 5;\n      }\n\n      let recommendedcalories = parseInt(bmr * 1.4);\n      return /*#__PURE__*/_jsxDEV(\"div\", {\n        children: [/*#__PURE__*/_jsxDEV(\"br\", {}, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 127,\n          columnNumber: 21\n        }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n          id: \"total\",\n          children: [/*#__PURE__*/_jsxDEV(\"h1\", {\n            children: \"Total Calories: 0 Kcal\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 128,\n            columnNumber: 37\n          }, this), \" \"]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 128,\n          columnNumber: 21\n        }, this), /*#__PURE__*/_jsxDEV(\"br\", {}, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 128,\n          columnNumber: 75\n        }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n          id: \"recommended\",\n          children: /*#__PURE__*/_jsxDEV(\"h2\", {\n            children: [\"Recommended: \", recommendedcalories, \" Kcal\"]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 129,\n            columnNumber: 43\n          }, this)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 129,\n          columnNumber: 21\n        }, this), /*#__PURE__*/_jsxDEV(\"br\", {}, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 129,\n          columnNumber: 97\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 126,\n        columnNumber: 17\n      }, this);\n    } else {\n      // Update chart data\n      this.fetchUserMeals();\n      return /*#__PURE__*/_jsxDEV(\"div\", {\n        children: \"Loading...\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 136,\n        columnNumber: 21\n      }, this);\n    }\n  }\n\n  fetchUserMeals() {\n    // need to set this.state.mealsArray to null later \n    console.log(\"______Fetching user meals ____________\");\n    let user = JSON.parse(localStorage.getItem('loggedinuser')); // get user from local storage\n\n    console.log(user);\n\n    if (user !== null) {\n      let uid = user.uid;\n      console.log(uid);\n      db.collection(\"todaysmeals\").doc(uid).get().then(doc => {\n        // Got all meals for the user\n        let mealsArr = doc.data().meals; // get meals array field of the entry i\n\n        console.log(`Data we got: ${mealsArr}`);\n        var stateArray = []; // temp array (will assign to mealsArray afterward)\n\n        var totalsTemp = {\n          // will assign to userTotals later\n          calories: 0,\n          //  (contains all fields in a meal's 'nutrition' except for trans fat)\n          calc_per: 0,\n          chol_g: 0,\n          fiber_g: 0,\n          iron_per: 0,\n          protein_g: 0,\n          sat_fat_g: 0,\n          sodium_g: 0,\n          sugar_g: 0,\n          carbs_g: 0,\n          fat_g: 0,\n          vit_a_per: 0,\n          vit_c_per: 0\n        };\n\n        if (mealsArr.length === 0) {\n          db.collection(\"users\").doc(uid).get().then(doc => {\n            let data = doc.data();\n            console.log(doc.data());\n            this.setState({\n              heightfeet: data.heightfeet,\n              heightinches: data.heightinches,\n              weight: data.weight,\n              age: data.age,\n              gender: data.gender // mealsArray: stateArray,\n              // userTotals: totalsTemp,\n\n            }, function () {\n              console.log(\"Just set height & weight\");\n            });\n          });\n        } else {\n          // Fetch meal info from meals collection\n          for (var i = 0; i < mealsArr.length; i++) {\n            let mealId = mealsArr[i]; // need to save it to be able to use it inside .then()\n\n            db.collection(\"meals\").doc(mealId).get().then(doc => {\n              let obj = doc.data();\n              var mealObj = {\n                id: mealId,\n                name: obj.name,\n                // string\n                // date: obj.date, // string (don't think we need it)   \n                nutrition: obj.nutrition // map [string -> number]\n\n              }; // ------------ specific to Home.js ------------- //\n\n              let chol_g = mealObj.nutrition.cholesterol_mg / 1000;\n              let sodium_g = mealObj.nutrition.sodium_mg / 1000;\n              console.log(\"Chol_g= \" + chol_g);\n              console.log(\"Sodium_g= \" + sodium_g);\n              totalsTemp['calories'] += mealObj.nutrition.calories;\n              totalsTemp['calc_per'] += mealObj.nutrition.calc_per;\n              totalsTemp['chol_g'] += chol_g;\n              totalsTemp['fiber_g'] += mealObj.nutrition.fiber_g;\n              totalsTemp['iron_per'] += mealObj.nutrition.iron_per;\n              totalsTemp['protein_g'] += mealObj.nutrition.protein_g;\n              totalsTemp['sat_fat_g'] += mealObj.nutrition.sat_fat_g;\n              totalsTemp['sodium_g'] += sodium_g;\n              totalsTemp['sugar_g'] += mealObj.nutrition.sugar_g;\n              totalsTemp['carbs_g'] += mealObj.nutrition.total_carbs_g;\n              totalsTemp['fat_g'] += mealObj.nutrition.total_fat_g;\n              totalsTemp['vit_a_per'] += mealObj.nutrition.vit_a_per;\n              totalsTemp['vit_c_per'] += mealObj.nutrition.vit_c_per;\n              console.log(totalsTemp); // ---------------------------------------------- //\n              // push() returns the new length of the array \n\n              if (stateArray.push(mealObj) == mealsArr.length) {\n                db.collection(\"users\").doc(uid).get().then(doc => {\n                  let data = doc.data();\n                  console.log(doc.data());\n                  this.setState({\n                    heightfeet: data.heightfeet,\n                    heightinches: data.heightinches,\n                    weight: data.weight,\n                    age: data.age,\n                    gender: data.gender,\n                    mealsArray: stateArray,\n                    userTotals: totalsTemp\n                  }, function () {\n                    console.log(\"Just set height & weight\");\n                  });\n                });\n              }\n            });\n          }\n        }\n      });\n    }\n  }\n\n}\n\nexport default Home;","map":{"version":3,"sources":["/Users/irtaza/Documents/GitHub/437nutrition/backend/nutrition/src/components/Home.js"],"names":["React","Component","PureComponent","firebase","db","Chart","Home","constructor","props","state","loggedinuser","mealsArray","userTotals","heightfeet","heightinches","weight","age","gender","fetchUserMeals","bind","auth","onAuthStateChanged","user","localStorage","setItem","JSON","stringify","removeItem","render","totals","bmr","parseInt","recommendedcalories","console","log","calories","display","maxWidth","role","fat_g","sat_fat_g","carbs_g","sodium_g","fiber_g","protein_g","sugar_g","title","chartArea","width","hAxis","minValue","bar","groupWidth","legend","position","backgroundColor","parse","getItem","uid","collection","doc","get","then","mealsArr","data","meals","stateArray","totalsTemp","calc_per","chol_g","iron_per","vit_a_per","vit_c_per","length","setState","i","mealId","obj","mealObj","id","name","nutrition","cholesterol_mg","sodium_mg","total_carbs_g","total_fat_g","push"],"mappings":"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","sourcesContent":["import React, { Component, PureComponent } from 'react';\nimport './Home.css';\nimport firebase from \"../fire\";\nimport { db } from '../fire';\nimport Chart from \"react-google-charts\";\n\n\nclass Home extends Component {\n    constructor(props) {\n        super(props);\n\n        this.state = {\n            loggedinuser: null,\n            mealsArray: null,   // user's meals\n            userTotals: null,   // map of nutrients to their total amounts\n            heightfeet: null,\n            heightinches: null,\n            weight: null,\n            age: null,\n            gender: null\n        }\n\n        this.fetchUserMeals = this.fetchUserMeals.bind(this);\n\n        firebase.auth().onAuthStateChanged(user => {\n            user\n                ? localStorage.setItem('loggedinuser', JSON.stringify(user))\n                : localStorage.removeItem('loggedinuser');\n        });\n\n\n    }\n\n    //formula = 10*heightfeet + 5*heightinches + weight\n    render() {\n        let heightfeet = this.state.heightfeet;\n        let heightinches = this.state.heightinches;\n        let gender = this.state.gender;\n        let age = this.state.age;\n        let weight = this.state.weight;\n        if (this.state.userTotals !== null && heightfeet !== null && heightinches !== null && weight !== null && age != null && gender != null) {\n            let totals = this.state.userTotals;\n            var bmr;\n            if (gender == \"female\") {\n                bmr = 6.25 * (parseInt(heightfeet) * 30.48 + 2.54 * parseInt(heightinches)) + (10 * parseInt(weight) / 2.205) - 5 * parseInt(age) - 161;\n            }\n            else {\n                bmr = 6.25 * (parseInt(heightfeet) * 30.48 + 2.54 * parseInt(heightinches)) + (10 * parseInt(weight) / 2.205) - 5 * parseInt(age) - 5;\n            }\n            let recommendedcalories = parseInt(bmr * 1.4);\n            //let recommended = this.state.userRecommended;\n            console.log(totals);\n            return (\n                <div id='w'>\n                    <br></br>\n                    <div>\n                    <div id=\"total\"><h1>Total Calories: {totals.calories} Kcal</h1> </div>\n                    <div id=\"recommended\"><h2>Recommended: {recommendedcalories} Kcal</h2></div>\n                    </div>\n                    <div id=\"chart\" style={{display: 'flex', maxWidth: 660}}>\n                        <Chart\n                            id=\"rchart\"\n                            width={350}\n                            height={450}\n                            // width={'650px'}\n                            // height={'600px'}\n                            chartType=\"BarChart\"\n                            loader={<div>Loading Chart</div>}\n                            data={[\n                                // Data from https://www.fda.gov/media/99069/download \n                                // Fat:\t        78 g\n                                // Sat. fat:\t20 g\n                                // Cholesterol:\t300 mg = 0.3 g\n                                // Carbs:\t    275 g\n                                // Sodium:\t    2300 mg = 2.3 g\n                                // Fiber:\t    28 g\n                                // Protein:     50 g\n                                // Sugars:      50 g\n                                ['Nutrients', 'Your intake', { role: 'style' }, { role: 'annotation' }, 'Recommended intake', { role: 'style' }, { role: 'annotation' }],\n                                // ['Calories', totals.calories, 'stroke-color: #703593; stroke-width: 4; fill-color: #C5A5CF', `You`, 2000, 'stroke-width: 2; fill-color: lightblue; stroke-color: blue; opacity: 0.5', `Recommended`],\n                                ['Fat', totals.fat_g, 'stroke-color: #F2C57C; stroke-width: 4; fill-color: #F2C57C', `You`, 0.27 * recommendedcalories * 0.1296, 'stroke-width: 2; fill-color: lightblue; stroke-color: lightblue; opacity: 0.5', `Recommended`],\n                                ['Sat. fat', totals.sat_fat_g, 'stroke-color: #DDAE7E; stroke-width: 4; fill-color: #DDAE7E', `You`, 0.10 * recommendedcalories * 0.1296, 'stroke-width: 2; fill-color: lightblue; stroke-color: lightblue; opacity: 0.5', `Recommended`],\n                                // ['Cholesterol', totals.chol_g, 'stroke-color: #7FB685; stroke-width: 4; fill-color: #7FB685', `You`, 0.3, 'stroke-width: 2; fill-color: lightblue; stroke-color: lightblue; opacity: 0.5', `Recommended`],\n                                ['Carbs', totals.carbs_g, 'stroke-color: #426A5A; stroke-width: 4; fill-color: #426A5A', `You`, 0.55 * recommendedcalories * 0.1296, 'stroke-width: 2; fill-color: lightblue; stroke-color: lightblue; opacity: 0.5', `Recommended`],\n                                ['Sodium', totals.sodium_g, 'stroke-color: #EF6F6C; stroke-width: 4; fill-color: #EF6F6C', `You`, 2.3, 'stroke-width: 2; fill-color: lightblue; stroke-color: lightblue; opacity: 0.5', `Recommended`],\n                                ['Fiber', totals.fiber_g, 'stroke-color: #CFA5B4; stroke-width: 4; fill-color: #CFA5B4', `You`, 28, 'stroke-width: 2; fill-color: lightblue; stroke-color: lightblue; opacity: 0.5', `Recommended`],\n                                ['Protein', totals.protein_g, 'stroke-color: #7A306C; stroke-width: 4; fill-color: #7A306C', `You`, 0.225 * recommendedcalories * 0.1296, 'stroke-width: 2; fill-color: lightblue; stroke-color: lightblue; opacity: 0.5', `Recommended`],\n                                ['Sugars', totals.sugar_g, 'stroke-color: #D62246; stroke-width: 4; fill-color: #D62246', `You`, 0.05 * recommendedcalories * 0.1296, 'stroke-width: 2; fill-color: lightblue; stroke-color: lightblue; opacity: 0.5', `Recommended`],\n                            ]}\n                            options={{\n                                title: \"Today's Nutrient Intake\",\n                                chartArea: { width: '70%' },\n                                hAxis: {\n                                    title: 'Amount in grams',\n                                    minValue: 0,\n                                },\n                                bar: { groupWidth: \"65%\" },\n                                // vAxis: {\n                                //     title: '',\n                                // },\n                                // * hide legend b/c bars are not custimizable\n                                legend: { position: 'none' },\n                                // background color of graph\n                                backgroundColor: '#ffffff',\n                                \n                                \n                            }}\n                            // For tests\n                            rootProps={{ 'data-testid': '1' }}\n                        />\n                    </div>\n                </div>\n            );\n        }\n        else if (this.state.userTotals == null && heightfeet !== null && heightinches !== null && weight !== null && age != null && gender != null) {\n            let totals = this.state.userTotals;\n            var bmr;\n            if (gender == \"female\") {\n                bmr = 6.25 * (parseInt(heightfeet) * 30.48 + 2.54 * parseInt(heightinches)) + (10 * parseInt(weight) / 2.205) - 5 * parseInt(age) - 161;\n            }\n            else {\n                bmr = 6.25 * (parseInt(heightfeet) * 30.48 + 2.54 * parseInt(heightinches)) + (10 * parseInt(weight) / 2.205) - 5 * parseInt(age) - 5;\n            }\n            let recommendedcalories = parseInt(bmr * 1.4);\n            return (\n                <div>\n                    <br></br>\n                    <div id=\"total\"><h1>Total Calories: 0 Kcal</h1> </div><br></br>\n                    <div id=\"recommended\"><h2>Recommended: {recommendedcalories} Kcal</h2></div><br></br>\n                </div>\n            )\n        }\n        else {\n            // Update chart data\n            this.fetchUserMeals();\n            return (<div>Loading...</div>);\n        }\n\n    }\n\n\n    fetchUserMeals() {\n        // need to set this.state.mealsArray to null later \n        console.log(\"______Fetching user meals ____________\");\n\n        let user = JSON.parse(localStorage.getItem('loggedinuser'));    // get user from local storage\n        console.log(user);\n        if (user !== null) {\n            let uid = user.uid;\n            console.log(uid);\n\n            db.collection(\"todaysmeals\").doc(uid).get().then((doc) => {\n                // Got all meals for the user\n                let mealsArr = doc.data().meals;  // get meals array field of the entry i\n                console.log(`Data we got: ${mealsArr}`);\n                var stateArray = [];    // temp array (will assign to mealsArray afterward)\n\n                var totalsTemp = {  // will assign to userTotals later\n                    calories: 0,    //  (contains all fields in a meal's 'nutrition' except for trans fat)\n                    calc_per: 0,\n                    chol_g: 0,\n                    fiber_g: 0,\n                    iron_per: 0,\n                    protein_g: 0,\n                    sat_fat_g: 0,\n                    sodium_g: 0,\n                    sugar_g: 0,\n                    carbs_g: 0,\n                    fat_g: 0,\n                    vit_a_per: 0,\n                    vit_c_per: 0,\n                };\n                if (mealsArr.length === 0) {\n                    db.collection(\"users\").doc(uid).get().then((doc) => {\n                        let data = doc.data();\n                        console.log(doc.data());\n\n                        this.setState({\n                            heightfeet: data.heightfeet,\n                            heightinches: data.heightinches,\n                            weight: data.weight,\n                            age: data.age,\n                            gender: data.gender,\n                            // mealsArray: stateArray,\n                            // userTotals: totalsTemp,\n                        }, function () {\n                            console.log(\"Just set height & weight\");\n                        });\n\n                    });\n                } else {\n                    // Fetch meal info from meals collection\n\n                    for (var i = 0; i < mealsArr.length; i++) {\n                        let mealId = mealsArr[i];   // need to save it to be able to use it inside .then()\n\n                        db.collection(\"meals\").doc(mealId).get().then((doc) => {\n\n                            let obj = doc.data();\n\n                            var mealObj = {\n                                id: mealId,\n                                name: obj.name, // string\n                                // date: obj.date, // string (don't think we need it)   \n                                nutrition: obj.nutrition    // map [string -> number]\n                            }\n                            // ------------ specific to Home.js ------------- //\n\n                            let chol_g = mealObj.nutrition.cholesterol_mg / 1000;\n                            let sodium_g = mealObj.nutrition.sodium_mg / 1000;\n                            console.log(\"Chol_g= \" + chol_g);\n                            console.log(\"Sodium_g= \" + sodium_g);\n                            totalsTemp['calories'] += mealObj.nutrition.calories;\n                            totalsTemp['calc_per'] += mealObj.nutrition.calc_per;\n                            totalsTemp['chol_g'] += chol_g;\n                            totalsTemp['fiber_g'] += mealObj.nutrition.fiber_g;\n                            totalsTemp['iron_per'] += mealObj.nutrition.iron_per;\n                            totalsTemp['protein_g'] += mealObj.nutrition.protein_g;\n                            totalsTemp['sat_fat_g'] += mealObj.nutrition.sat_fat_g;\n                            totalsTemp['sodium_g'] += sodium_g;\n                            totalsTemp['sugar_g'] += mealObj.nutrition.sugar_g;\n                            totalsTemp['carbs_g'] += mealObj.nutrition.total_carbs_g;\n                            totalsTemp['fat_g'] += mealObj.nutrition.total_fat_g;\n                            totalsTemp['vit_a_per'] += mealObj.nutrition.vit_a_per;\n                            totalsTemp['vit_c_per'] += mealObj.nutrition.vit_c_per;\n\n                            console.log(totalsTemp);\n                            // ---------------------------------------------- //\n\n                            // push() returns the new length of the array \n                            if (stateArray.push(mealObj) == mealsArr.length) {\n\n                                db.collection(\"users\").doc(uid).get().then((doc) => {\n                                    let data = doc.data();\n                                    console.log(doc.data());\n\n                                    this.setState({\n                                        heightfeet: data.heightfeet,\n                                        heightinches: data.heightinches,\n                                        weight: data.weight,\n                                        age: data.age,\n                                        gender: data.gender,\n                                        mealsArray: stateArray,\n                                        userTotals: totalsTemp,\n                                    }, function () {\n                                        console.log(\"Just set height & weight\");\n                                    });\n\n                                });\n\n                            }\n\n                        });\n\n                    }\n                }\n\n\n            });\n\n\n        }\n\n    }\n\n\n\n}\n\n\nexport default Home;"]},"metadata":{},"sourceType":"module"}